// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StackVsMemory {
    uint256[] public data;

    function addToStack(uint256 x, uint256 y) external pure returns (uint256) {
        uint256 result;
        assembly {
            // Add x and y and store the result on the stack
            result := add(x, y)
        }
        return result;
    }

    function addToMemory(uint256 x, uint256 y) external pure returns (uint256) {
        uint256 result;
        assembly {
            // Store x and y in memory
            mstore(0x0, x)
            mstore(0x20, y)
            // Load x and y from memory, add them, and store the result in memory
            result := add(mload(0x0), mload(0x20))
        }
        return result;
    }

    function setData(uint256[] memory _data) external {
        data = _data;
    }
}
