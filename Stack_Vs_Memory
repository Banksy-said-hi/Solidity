// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StackUsage {
    function add(uint256 x, uint256 y) external pure returns (uint256) {
        uint256 result;
        assembly {
            // Add x and y and store the result on the stack
            result := add(x, y)
        }
        return result;
    }
}

contract MemoryUsage {
    function concatenate(string memory a, string memory b) external pure returns (string memory) {
        string memory result;
        assembly {
            // Get the length of string 'a'
            let lengthA := mload(a)
            // Get the length of string 'b'
            let lengthB := mload(b)
            // Allocate memory for the result string
            result := mload(0x40)
            // Update the free memory pointer
            mstore(0x40, add(result, add(lengthA, lengthB)))
            // Copy the contents of 'a' to the result memory
            mstore(result, lengthA)
            // Copy the contents of 'a' to the result memory
            mstore(add(result, lengthA), lengthB)
        }
        return result;
    }
}
